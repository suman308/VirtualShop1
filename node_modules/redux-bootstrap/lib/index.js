"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var react_dom_1 = require("react-dom");
var react_router_1 = require("react-router");
var createBrowserHistory_1 = require("history/lib/createBrowserHistory");
var react_router_redux_1 = require("react-router-redux");
var redux_immutable_1 = require("redux-immutable");
var reselect_1 = require("reselect");
var Immutable = require("immutable");
var root_1 = require("./containers/root");
var configure_store_1 = require("./store/configure_store");
var initialRouterReducerState = Immutable.fromJS({
    locationBeforeTransitions: null
});
var lastStoredRoutingState;
var routerReducer = function (state, action) {
    if (state === void 0) { state = initialRouterReducerState; }
    if (action.type === react_router_redux_1.LOCATION_CHANGE) {
        lastStoredRoutingState = { locationBeforeTransitions: action.payload };
        return state.merge(lastStoredRoutingState);
    }
    return state;
};
var getRouting = function (state) { return state.get("routing"); };
var selectLocation = reselect_1.createSelector(getRouting, function (routing) {
    if (Immutable.is(routing, Immutable.fromJS(lastStoredRoutingState))) {
        return lastStoredRoutingState;
    }
    return routing.toJS();
});
function bootstrap(options) {
    if (options === undefined) {
        throw new TypeError("Null argument options.");
    }
    ;
    if (options.routes === undefined) {
        throw new TypeError("Invalid configuration field: routes.");
    }
    ;
    if (options.reducers === undefined) {
        throw new TypeError("Invalid configuration field: reducers.");
    }
    ;
    var routes = options.routes;
    var reducers = options.reducers;
    var container = options.container || "root";
    var createHistory = options.createHistory || createBrowserHistory_1.default;
    var historyOptions = options.historyOptions || {};
    var initialState = options.initialState || {};
    var immutableInitialState = Immutable.fromJS(initialState);
    var middlewares = options.middlewares || [];
    var enhancers = options.enhancers || [];
    var render = options.render || react_dom_1.render;
    reducers.routing = routerReducer;
    var rootReducer = redux_immutable_1.combineReducers(reducers);
    var routerHistory = react_router_1.useRouterHistory(createHistory)(historyOptions);
    var routerMddlwr = react_router_redux_1.routerMiddleware(routerHistory);
    var devToolsOptions = options.devToolsOptions || {
        serialize: {
            immutable: Immutable
        }
    };
    var store = configure_store_1.default(middlewares.concat([routerMddlwr]), enhancers, rootReducer, immutableInitialState, devToolsOptions);
    var history = react_router_redux_1.syncHistoryWithStore(routerHistory, store, {
        selectLocationState: selectLocation
    });
    var root = root_1.default(store, history, routes, options.routerProps);
    var renderArgs = [root];
    if (typeof document !== "undefined") {
        renderArgs.push(document.getElementById(container));
    }
    var output = render.apply(void 0, renderArgs);
    return {
        store: store,
        history: history,
        output: output,
        root: root
    };
}
exports.bootstrap = bootstrap;
